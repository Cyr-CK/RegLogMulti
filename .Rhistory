},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
?One.Hot.Encoder
devtools::document()
One.Hot.Encoder <- R6::R6Class("One.Hot.Encoder",
public = list(
#' @field categories (`list()`) Categories of qualitative features.
categories = NULL,
#' @rdname One.Hot.Encoder
#' @description
#' Create a new one-hot encoder object.
#' @details
#' Something else
#' @return A new one-hot encoder object.
#' @examples
#' # To create an instance of the class
#' ohe <- One.Hot.Encoder$new()
initialize = function(){
self$categories <- list()
},
#' @description
#' Fit the one-hot encoder to data.
#' @param data (`dataframe`) Dataframe.
fit = function(data) {
for (col in names(data)) {
self$categories[[col]] <- unique(data[[col]])
}
invisible(self)
},
#' @description
#' Transform the passed data object based on the fit data object.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
transform = function(data) {
result <- data.frame(row.names = 1:nrow(data))
for (col in names(data)) {
if (col %in% names(self$categories)) {
encoded <- model.matrix(~ 0 + data[[col]])
colnames(encoded) <- paste(col, self$categories[[col]], sep = "_")
result <- cbind(result, encoded)[-1]
} else {
result <- cbind(result, data[[col]])
}
}
result
},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
?One.Hot.Encoder
devtools::document()
#' One-Hot Encoder
#'
#' @description
#' Class of a One-Hot Encoder object that has fit, fit_transform and transform methods to use over the qualitative features you want to encode.
#
#' @details
#' Something
#'
# #' @import R6
# #'
# #' @export
# #'
# #' @examples
# #' ohe <- One.Hot.Encoder$new().
# #'
# #' X_train_ohe <- ohe$fit_transform(X_train).
# #'
# #' ohe$fit(X_train).
# #' X_test_ohe <- ohe$transform(X_test).
One.Hot.Encoder <- R6::R6Class("One.Hot.Encoder",
public = list(
#' @field categories (`list()`) Categories of qualitative features.
categories = NULL,
#' @rdname One.Hot.Encoder
#' @description
#' Create a new one-hot encoder object.
#' @details
#' Something else
#' @return A new one-hot encoder object.
#' @examples
#' # To create an instance of the class
#' ohe <- One.Hot.Encoder$new()
#' @export
initialize = function(){
self$categories <- list()
},
#' @description
#' Fit the one-hot encoder to data.
#' @param data (`dataframe`) Dataframe.
fit = function(data) {
for (col in names(data)) {
self$categories[[col]] <- unique(data[[col]])
}
invisible(self)
},
#' @description
#' Transform the passed data object based on the fit data object.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
transform = function(data) {
result <- data.frame(row.names = 1:nrow(data))
for (col in names(data)) {
if (col %in% names(self$categories)) {
encoded <- model.matrix(~ 0 + data[[col]])
colnames(encoded) <- paste(col, self$categories[[col]], sep = "_")
result <- cbind(result, encoded)[-1]
} else {
result <- cbind(result, data[[col]])
}
}
result
},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
?One.Hot.Encoder
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
#' One-Hot Encoder
#'
# #' @description
# #' Class of a One-Hot Encoder object that has fit, fit_transform and transform methods to use over the qualitative features you want to encode.
# #
# #' @details
# #' Something
# #'
# #' @import R6
# #'
# #' @export
# #'
# #' @examples
# #' ohe <- One.Hot.Encoder$new().
# #'
# #' X_train_ohe <- ohe$fit_transform(X_train).
# #'
# #' ohe$fit(X_train).
# #' X_test_ohe <- ohe$transform(X_test).
One.Hot.Encoder <- R6Class("One.Hot.Encoder",
public = list(
#' @field categories (`list()`) Categories of qualitative features.
categories = NULL,
#' @description
#' Create a new one-hot encoder object.
#' @details
#' Something else
#' @return A new one-hot encoder object.
#' @examples
#' # To create an instance of the class
#' ohe <- One.Hot.Encoder$new()
#' @export
initialize = function(){
self$categories <- list()
},
#' @description
#' Fit the one-hot encoder to data.
#' @param data (`dataframe`) Dataframe.
fit = function(data) {
for (col in names(data)) {
self$categories[[col]] <- unique(data[[col]])
}
invisible(self)
},
#' @description
#' Transform the passed data object based on the fit data object.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
transform = function(data) {
result <- data.frame(row.names = 1:nrow(data))
for (col in names(data)) {
if (col %in% names(self$categories)) {
encoded <- model.matrix(~ 0 + data[[col]])
colnames(encoded) <- paste(col, self$categories[[col]], sep = "_")
result <- cbind(result, encoded)[-1]
} else {
result <- cbind(result, data[[col]])
}
}
result
},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
#' One-Hot Encoder
# #' @description
# #' Class of a One-Hot Encoder object that has fit, fit_transform and transform methods to use over the qualitative features you want to encode.
# #
# #' @details
# #' Something
# #'
# #' @import R6
# #'
# #' @export
# #'
# #' @examples
# #' ohe <- One.Hot.Encoder$new().
# #'
# #' X_train_ohe <- ohe$fit_transform(X_train).
# #'
# #' ohe$fit(X_train).
# #' X_test_ohe <- ohe$transform(X_test).
One.Hot.Encoder <- R6Class("One.Hot.Encoder",
public = list(
#' @field categories (`list()`) Categories of qualitative features.
categories = NULL,#' @description
#' Create a new one-hot encoder object.
#' @details
#' Something else
#' @return A new one-hot encoder object.
#' @examples
#' # To create an instance of the class
#' ohe <- One.Hot.Encoder$new()
#' @export
initialize = function(){
self$categories <- list()
},
#' @description
#' Fit the one-hot encoder to data.
#' @details
#' someth
#' @param data (`dataframe`) Dataframe.
#' @return nothing
fit = function(data) {
for (col in names(data)) {
self$categories[[col]] <- unique(data[[col]])
}
invisible(self)
},
#' @description
#' Transform the passed data object based on the fit data object.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
transform = function(data) {
result <- data.frame(row.names = 1:nrow(data))
for (col in names(data)) {
if (col %in% names(self$categories)) {
encoded <- model.matrix(~ 0 + data[[col]])
colnames(encoded) <- paste(col, self$categories[[col]], sep = "_")
result <- cbind(result, encoded)[-1]
} else {
result <- cbind(result, data[[col]])
}
}
result
},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
?One.Hot.Encoder
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
#' One-Hot Encoder
# #' @description
# #' Class of a One-Hot Encoder object that has fit, fit_transform and transform methods to use over the qualitative features you want to encode.
# #
# #' @details
# #' Something
# #'
# #' @import R6
# #'
# #' @export
# #'
# #' @examples
# #' ohe <- One.Hot.Encoder$new().
# #'
# #' X_train_ohe <- ohe$fit_transform(X_train).
# #'
# #' ohe$fit(X_train).
# #' X_test_ohe <- ohe$transform(X_test).
One.Hot.Encoder <- R6Class("One.Hot.Encoder",
public = list(
#' @field categories (`list()`) \cr
#' Categories of qualitative features.
categories = NULL,
#' @describeIn initialize One.Hot.Encoder
#' @description
#' Create a new one-hot encoder object.
#' @details
#' Something else
#' @return A new one-hot encoder object.
#' @examples
#' # To create an instance of the class
#' ohe <- One.Hot.Encoder$new()
#' @export
initialize = function(){
self$categories <- list()
},
#' @description
#' Fit the one-hot encoder to data.
#' @details
#' someth
#' @param data (`dataframe`) Dataframe.
#' @return nothing
fit = function(data) {
for (col in names(data)) {
self$categories[[col]] <- unique(data[[col]])
}
invisible(self)
},
#' @description
#' Transform the passed data object based on the fit data object.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
transform = function(data) {
result <- data.frame(row.names = 1:nrow(data))
for (col in names(data)) {
if (col %in% names(self$categories)) {
encoded <- model.matrix(~ 0 + data[[col]])
colnames(encoded) <- paste(col, self$categories[[col]], sep = "_")
result <- cbind(result, encoded)[-1]
} else {
result <- cbind(result, data[[col]])
}
}
result
},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
?One.Hot.Encoder
devtools::document()
?One.Hot.Encoder
devtools::document()
warnings()
#' One-Hot Encoder
# #' @description
# #' Class of a One-Hot Encoder object that has fit, fit_transform and transform methods to use over the qualitative features you want to encode.
# #
# #' @details
# #' Something
# #'
# #' @import R6
# #'
# #' @export
# #'
# #' @examples
# #' ohe <- One.Hot.Encoder$new().
# #'
# #' X_train_ohe <- ohe$fit_transform(X_train).
# #'
# #' ohe$fit(X_train).
# #' X_test_ohe <- ohe$transform(X_test).
One.Hot.Encoder <- R6Class("One.Hot.Encoder",
public = list(
#' @field categories (`list()`) \cr
#' Categories of qualitative features.
categories = NULL,
#' Initialisation de l'encodeur
#' @describeIn Method new()
#' @description
#' Create a new one-hot encoder object.
#' @details
#' Something else
#' @return A new one-hot encoder object.
#' @examples
#' # To create an instance of the class
#' ohe <- One.Hot.Encoder$new()
#' @export
initialize = function(){
self$categories <- list()
},
#' @description
#' Fit the one-hot encoder to data.
#' @details
#' someth
#' @param data (`dataframe`) Dataframe.
#' @return nothing
fit = function(data) {
for (col in names(data)) {
self$categories[[col]] <- unique(data[[col]])
}
invisible(self)
},
#' @description
#' Transform the passed data object based on the fit data object.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
transform = function(data) {
result <- data.frame(row.names = 1:nrow(data))
for (col in names(data)) {
if (col %in% names(self$categories)) {
encoded <- model.matrix(~ 0 + data[[col]])
colnames(encoded) <- paste(col, self$categories[[col]], sep = "_")
result <- cbind(result, encoded)[-1]
} else {
result <- cbind(result, data[[col]])
}
}
result
},
#' @description
#' Fit to data object then one-hot encode it.
#' @param data (`dataframe`) Dataframe.
#' @return Dataframe of one-hot encoded data.
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
?One.Hot.Encoder
devtools::document()
?One.Hot.Encoder
devtools::document()
warnings()
?One.Hot.Encoder
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
?One.Hot.Encoder
devtools::document()
warnings()
?One.Hot.Encoder
devtools::document()
?One.Hot.Encoder
devtools::document()
?One.Hot.Encoder
devtools::document()
warnings()
?One.Hot.Encoder
devtools::document()
warnings()
devtools::document()
?One.Hot.Encoder
devtools::document()
warnings()
devtools::document()
devtools::document()
?One.Hot.Encoder
?One.Hot.Encoder
ohe <- One.Hot.Encoder$new()
ohe$fit()
ohe$fit(data.frame(color=c("red","green","blue","red"")))
ohe$fit(data.frame(color=c("red","green","blue","red")))
rm(ohe)
obj <- ohe$fit(data.frame(color=c("red","green","blue","red")))
ohe <- One.Hot.Encoder$new()
obj <- ohe$fit(data.frame(color=c("red","green","blue","red")))
obj
rm(obj, ohe)
?One.Hot.Encoder
?One.Hot.Encoder
?One.Hot.Encoder
?One.Hot.Encoder
?FactoMineR::PCA
?One.Hot.Encoder
?One.Hot.Encoder

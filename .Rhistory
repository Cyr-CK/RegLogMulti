invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get robust scaling.
#' @return A dataframe containing the data after robust scaling.
#' @examples
#' # Performs a robust scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$median) || is.null(self$iqr)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(data) - self$median) / self$iqr)
data
},
#' @description
#' This method fits a robust scaler on a given dataset then applies robust scaling on it.
#' @param data A dataframe containing the quantitative data that will get robust scaling.
#' @return A dataframe containing the data after robust scaling.
#' @examples
#' # Fitting and robust scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
#' Min-Max Scaler
#'
#' @description
#' Class of a Min-Max scaler object that has fit, fit_transform and transform methods to min-max scale quantitative data.
#'
# #' @details
#'
#' @import R6
#' @export
#'
#' @examples
#' scaler <- MinMax.Scaler$new()
#'
#' X_train_scaled <- scaler$fit_transform(X_train)
#'
#' scaler$fit(X_train)
#' X_test_scaled <- scaler$transform(X_test)
MinMax.Scaler <- R6::R6Class("MinMax.Scaler",
public = list(
#' @field min Vector of feature minimums.
min = NULL,
#' @field max Vector of feature maximums.
max = NULL,
#' @description
#' This method creates a new min-max scaler object.
#' @return A new min-max scaler object.
#' @examples
#' # Creates a new instance of the class
#' scaler <- MinMax.Scaler$new()
initialize = function(){
self$min <- NULL
self$max <- NULL
},
#' @description
#' This method fits a min-max scaler on a given dataset.
#' @param data A dataframe containing the quantitative data on which the scaler computes the features' minimum and maximum.
#' @return Nothing. The object is internally updated when using this method.
#' @examples
#' # Fits the object to a given dataset
#' scaler$fit(X_train)
fit = function(data) {
quanti <- data[sapply(data,is.numeric)]
self$min <- apply(data,2, min, na.rm = TRUE)
self$max <- apply(data, 2, max, na.rm = TRUE)
invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Performs a min-max scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$min) || is.null(self$max)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(data) - self$min) / (self$max - self$min))
data
},
#' @description
#' This method fits a min-max scaler on a given dataset then applies min-max scaling on it.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Fitting and min-max scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
scaler <- MinMax.Scaler$new()
scaler$fit_transform(df)
scaler$min
#' Robust (Median) Scaler
#'
#' @description
#' Class of a robust (median) scaler object that has fit, fit_transform and transform methods to scale quantitative data.
#'
# #' @details
#'
#' @import R6
#' @export
#'
#' @examples
#' scaler <- Robust.Scaler$new()
#'
#' X_train_scaled <- scaler$fit_transform(X_train)
#'
#' scaler$fit(X_train)
#' X_test_scaled <- scaler$transform(X_test)
Robust.Scaler <- R6::R6Class("Robust.Scaler",
public = list(
#' @field median Vector of feature medians.
median = NULL,
#' @field iqr Vector of feature inter-quartile ranges.
iqr = NULL,
#' @description
#' This method creates a new robust scaler object.
#' @return A new standard robust object.
#' @examples
#' # Creates a new instance of the class
#' scaler <- Robust.Scaler$new()
initialize = function(){
self$median <- NULL
self$iqr <- NULL
},
#' @description
#' This method fits a robust scaler on a given dataset.
#' @param data A dataframe containing the quantitative data on which the scaler computes the features' median and inter-quartile range.
#' @return Nothing. The object is internally updated when using this method.
#' @examples
#' # Fits the object to a given dataset
#' scaler$fit(X_train)
fit = function(data) {
quanti <- data[sapply(data,is.numeric)]
self$median <- sapply(quanti, median, na.rm = TRUE)
self$iqr <- apply(quanti, 2, function(x){
x <- x[!is.na(x)]
quantile(x, 0.75) - quantile(x, 0.25)
})
invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get robust scaling.
#' @return A dataframe containing the data after robust scaling.
#' @examples
#' # Performs a robust scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$median) || is.null(self$iqr)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(data) - self$median) / self$iqr)
data
},
#' @description
#' This method fits a robust scaler on a given dataset then applies robust scaling on it.
#' @param data A dataframe containing the quantitative data that will get robust scaling.
#' @return A dataframe containing the data after robust scaling.
#' @examples
#' # Fitting and robust scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
#' Min-Max Scaler
#'
#' @description
#' Class of a Min-Max scaler object that has fit, fit_transform and transform methods to min-max scale quantitative data.
#'
# #' @details
#'
#' @import R6
#' @export
#'
#' @examples
#' scaler <- MinMax.Scaler$new()
#'
#' X_train_scaled <- scaler$fit_transform(X_train)
#'
#' scaler$fit(X_train)
#' X_test_scaled <- scaler$transform(X_test)
MinMax.Scaler <- R6::R6Class("MinMax.Scaler",
public = list(
#' @field min Vector of feature minimums.
min = NULL,
#' @field max Vector of feature maximums.
max = NULL,
#' @description
#' This method creates a new min-max scaler object.
#' @return A new min-max scaler object.
#' @examples
#' # Creates a new instance of the class
#' scaler <- MinMax.Scaler$new()
initialize = function(){
self$min <- NULL
self$max <- NULL
},
#' @description
#' This method fits a min-max scaler on a given dataset.
#' @param data A dataframe containing the quantitative data on which the scaler computes the features' minimum and maximum.
#' @return Nothing. The object is internally updated when using this method.
#' @examples
#' # Fits the object to a given dataset
#' scaler$fit(X_train)
fit = function(data) {
quanti <- data[sapply(data,is.numeric)]
self$min <- apply(quanti,2, min, na.rm = TRUE)
self$max <- apply(quanti, 2, max, na.rm = TRUE)
invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Performs a min-max scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$min) || is.null(self$max)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(data) - self$min) / (self$max - self$min))
data
},
#' @description
#' This method fits a min-max scaler on a given dataset then applies min-max scaling on it.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Fitting and min-max scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
scaler <- MinMax.Scaler$new()
scaler$fit_transform(df)
#' Min-Max Scaler
#'
#' @description
#' Class of a Min-Max scaler object that has fit, fit_transform and transform methods to min-max scale quantitative data.
#'
# #' @details
#'
#' @import R6
#' @export
#'
#' @examples
#' scaler <- MinMax.Scaler$new()
#'
#' X_train_scaled <- scaler$fit_transform(X_train)
#'
#' scaler$fit(X_train)
#' X_test_scaled <- scaler$transform(X_test)
MinMax.Scaler <- R6::R6Class("MinMax.Scaler",
public = list(
#' @field min Vector of feature minimums.
min = NULL,
#' @field max Vector of feature maximums.
max = NULL,
#' @description
#' This method creates a new min-max scaler object.
#' @return A new min-max scaler object.
#' @examples
#' # Creates a new instance of the class
#' scaler <- MinMax.Scaler$new()
initialize = function(){
self$min <- NULL
self$max <- NULL
},
#' @description
#' This method fits a min-max scaler on a given dataset.
#' @param data A dataframe containing the quantitative data on which the scaler computes the features' minimum and maximum.
#' @return Nothing. The object is internally updated when using this method.
#' @examples
#' # Fits the object to a given dataset
#' scaler$fit(X_train)
fit = function(data) {
quanti <- data[sapply(data,is.numeric)]
self$min <- apply(quanti,2, min, na.rm = TRUE)
self$max <- apply(quanti, 2, max, na.rm = TRUE)
invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Performs a min-max scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$min) || is.null(self$max)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(data) - self$min) / (self$max - self$min))
data
},
#' @description
#' This method fits a min-max scaler on a given dataset then applies min-max scaling on it.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Fitting and min-max scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
scaler <- MinMax.Scaler$new()
scaler$fit_transform(df)
scaler$min
scaler$max
#' Robust (Median) Scaler
#'
#' @description
#' Class of a robust (median) scaler object that has fit, fit_transform and transform methods to scale quantitative data.
#'
# #' @details
#'
#' @import R6
#' @export
#'
#' @examples
#' scaler <- Robust.Scaler$new()
#'
#' X_train_scaled <- scaler$fit_transform(X_train)
#'
#' scaler$fit(X_train)
#' X_test_scaled <- scaler$transform(X_test)
Robust.Scaler <- R6::R6Class("Robust.Scaler",
public = list(
#' @field median Vector of feature medians.
median = NULL,
#' @field iqr Vector of feature inter-quartile ranges.
iqr = NULL,
#' @description
#' This method creates a new robust scaler object.
#' @return A new standard robust object.
#' @examples
#' # Creates a new instance of the class
#' scaler <- Robust.Scaler$new()
initialize = function(){
self$median <- NULL
self$iqr <- NULL
},
#' @description
#' This method fits a robust scaler on a given dataset.
#' @param data A dataframe containing the quantitative data on which the scaler computes the features' median and inter-quartile range.
#' @return Nothing. The object is internally updated when using this method.
#' @examples
#' # Fits the object to a given dataset
#' scaler$fit(X_train)
fit = function(data) {
quanti <- data[sapply(data,is.numeric)]
self$median <- sapply(quanti, median, na.rm = TRUE)
self$iqr <- apply(quanti, 2, function(x){
x <- x[!is.na(x)]
quantile(x, 0.75) - quantile(x, 0.25)
})
invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get robust scaling.
#' @return A dataframe containing the data after robust scaling.
#' @examples
#' # Performs a robust scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$median) || is.null(self$iqr)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(quanti) - self$median) / self$iqr)
data
},
#' @description
#' This method fits a robust scaler on a given dataset then applies robust scaling on it.
#' @param data A dataframe containing the quantitative data that will get robust scaling.
#' @return A dataframe containing the data after robust scaling.
#' @examples
#' # Fitting and robust scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
#' Min-Max Scaler
#'
#' @description
#' Class of a Min-Max scaler object that has fit, fit_transform and transform methods to min-max scale quantitative data.
#'
# #' @details
#'
#' @import R6
#' @export
#'
#' @examples
#' scaler <- MinMax.Scaler$new()
#'
#' X_train_scaled <- scaler$fit_transform(X_train)
#'
#' scaler$fit(X_train)
#' X_test_scaled <- scaler$transform(X_test)
MinMax.Scaler <- R6::R6Class("MinMax.Scaler",
public = list(
#' @field min Vector of feature minimums.
min = NULL,
#' @field max Vector of feature maximums.
max = NULL,
#' @description
#' This method creates a new min-max scaler object.
#' @return A new min-max scaler object.
#' @examples
#' # Creates a new instance of the class
#' scaler <- MinMax.Scaler$new()
initialize = function(){
self$min <- NULL
self$max <- NULL
},
#' @description
#' This method fits a min-max scaler on a given dataset.
#' @param data A dataframe containing the quantitative data on which the scaler computes the features' minimum and maximum.
#' @return Nothing. The object is internally updated when using this method.
#' @examples
#' # Fits the object to a given dataset
#' scaler$fit(X_train)
fit = function(data) {
quanti <- data[sapply(data,is.numeric)]
self$min <- apply(quanti,2, min, na.rm = TRUE)
self$max <- apply(quanti, 2, max, na.rm = TRUE)
invisible(self)
},
#' @description
#' This method applies on a given dataset the transformation rules the scaler learned from the dataset it was fit to.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Performs a min-max scaling on a given dataset
#' X_test_scaled <- scaler$transform(X_test)
transform = function(data) {
if (is.null(self$min) || is.null(self$max)) {
stop("Fit the scaler before transforming data")
}
quanti <- data[sapply(data, is.numeric)]
data[names(quanti)] <- t((t(quanti) - self$min) / (self$max - self$min))
data
},
#' @description
#' This method fits a min-max scaler on a given dataset then applies min-max scaling on it.
#' @param data A dataframe containing the quantitative data that will get min-max scaling.
#' @return A dataframe containing the data after min-max scaling.
#' @examples
#' # Fitting and min-max scaling on a given dataset
#' X_train_scaled <- scaler$fit_transform(X_train)
fit_transform = function(data) {
self$fit(data)
self$transform(data)
}
)
)
scaler <- MinMax.Scaler$new()
scaler$fit_transform(df)
scaler <- Robust.Scaler$new()
scaler$fit_transform(df)
apply(data.frame(),2, mean)
is.null(data.frame())
is.na.data.frame(data.frame())
is.data.frame(data.frame())
is.null(data.frame())
ncol(data.frame())
setwd("~/Data Science/Projets/R/RegLogMulti")
roxygen2::oxygenize()
roxygen2::roxygenize()
warnings
warnings()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
rlang::last_trace()
roxygen2::roxygenize()
devtools::document()
